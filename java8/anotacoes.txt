------------------Aula 01------------------------------------------
javadoc
	quando você passa o mouse por cima do metodo
	ele mostra como usa-lo
	
java 8 deixa os metodos mais enxutos
	o metodo sort tem no java 8 do List
		java util

Código fonte do List
	default methods
		um metodo dentro de uma interface
		corpo
			precisa ter um modificador default
		estrategia de evolução de interfaces
		
List
	foreach
		precisa de um Consumer
			recebe um consumidor de String

iterable
	A mãe de Collection
	todas as collections são iterables
	
Uma interface não pode ter estado
	somente metodos concretos
	
------------------Aula 02 Que venham os lambdas------------------------------------------			
Lambda
	Em vez de escrever a classe anônima
	deixamos de escrever alguns itens que podem ser inferidos
	
	palavras.forEach((String s)->{
			System.out.println(s);
		});
		
	o que é método abstrato?
	lambda se encaixa melhor 
		quando a expressão dentro do método é curta	
		deixa tudo mais legivel e simples	
		
	Object não é uma interface funcional
		não da para utilizar o lambda nele
		
		
------------------Aula 03 Código mais sucinto com Method references------------------------------------------
Comparator.comparing
	factory de comparator
	metodo estatico
	É uma interface funcional
	Interface Function
		ajuda a passar um objeto para o Comparator.comparing
		
Method reference
	Não há parenteses
	Não há flechas
	palavras.sort(Comparator.comparing(s -> s.length()));
		para
			palavras.sort(Comparator.comparing(String::length));// Isso é chamado de method reference

		
------------------Aula 04  Streams: trabalhando melhor com coleções------------------------------------------
Streams: trabalhando com coleções no java 8
Filter
	Está dentro de uma interface Stream
	recebe um predicado
		verdadeiro ou falso
		cursos.stream()
			.filter(c->c.getAlunos()>100)
			.forEach(c->System.out.println(c.getNome()));//Devolve uma lista de cursos que tenha o numero maior que 100
	O lambda passado para o filter
		Não pode ser referenciado pelo method reference
		
Streams primitivos		
	Quando fazemos um stream map(Curso::getAlunos)
		recebe de volta Stream<Integer>
		utilizara mais recursos da JVM
	Podemos invocar o mapToInt
		Devolve um IntStream
			possui outros metodos para se trabalhar



			